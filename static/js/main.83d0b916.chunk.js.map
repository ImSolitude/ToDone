{"version":3,"sources":["components/Styled/Styled.js","components/AddTask.js","components/Checkbox/Checkbox.js","components/Credit.js","components/App.js","utils.js","serviceWorker.js","index.js"],"names":["Button","styled","button","_templateObject","props","left","Title","h1","_templateObject2","size","concat","AddTitle","_templateObject3","AddInput","input","_templateObject4","AddTask","React","forwardRef","ref","addButtonRef","createRef","react_default","a","createElement","className","type","name","autoComplete","onKeyPress","e","charCode","which","current","click","Styled","onClick","handleAdd","Checkbox","_useState","useState","_useState2","Object","slicedToArray","check","setCheck","useEffect","done","id","index","checked","onChange","target","handleCheck","htmlFor","task","Link","Credit_templateObject","StyledCredit","h3","Credit_templateObject2","Credit","index_es","icon","faHeart","pulse","style","color","opacity","margin","href","this","float","faGithub","Component","App","tasks","setTasks","_useState3","_useState4","tasksNumber","setTasksNumber","localStorage","getItem","JSON","parse","clear","checkValue","taskIndex","cloneTasks","map","i","assign","setItem","stringify","filter","length","myInput","focus","Fragment","components_Checkbox_Checkbox","key","components_AddTask","value","trim","toConsumableArray","components_Credit","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83d0b916.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Button = styled.button`\n  float: ${props => (props.left ? \"left\" : \"right\")};\n  cursor: pointer;\n  padding: 10px 15px;\n  background: var(--primary);\n  border: 2px solid transparent;\n  color: white;\n  padding: 5px 15px;\n  font-size: 1rem;\n  border-radius: 3px;\n  transition: all 0.3s ease;\n  margin-bottom: 10px;\n  letter-spacing: 1px;\n  &:hover {\n    border-color: var(--secondary);\n  }\n  &:active,\n  &:focus {\n    outline: none;\n    background: var(--secondary);\n  }\n`;\n\nconst Title = styled.h1`\n  font-family: \"Helvetica Now Display XBold\", sans-serif;\n  color: var(--primary);\n  text-align: left;\n  font-size: ${props => (props.size ? `${props.size}rem` : \"3rem\")};\n  & span.tasks-number {\n    vertical-align: super;\n    font-size: 1rem;\n    color: var(--secondary);\n  }\n`;\nconst AddTitle = styled(Title)`\n  color: var(--white);\n  margin: 0.5rem auto;\n`;\n\nconst AddInput = styled.input`\n  flex: 1 1 auto;\n  margin-right: 10px;\n  padding: 5px 15px;\n  height: 46px;\n  font-size: 1rem;\n  font-family: \"Helvetica Now Text Regular\", sans-serif;\n  border: none;\n  border-radius: 3px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n  border: 2px solid transparent;\n  transition: all 0.3s ease;\n  &:focus {\n    outline: none;\n    border: 2px solid var(--secondary);\n  }\n`;\n\nexport default Button;\nexport { Title, AddInput, AddTitle };\n","import React from \"react\";\nimport Button, { AddTitle, AddInput } from \"./Styled/Styled\";\n\nconst AddTask = React.forwardRef((props, ref) => {\n  const addButtonRef = React.createRef();\n  const handleAdd = () => {\n    props.handleAdd();\n  };\n\n  const handleEnterPress = e => {\n    if ((e.charCode || e.which) === 13) {\n      addButtonRef.current.click();\n    }\n  };\n\n  return (\n    <div className=\"add-task\">\n      <AddInput\n        type=\"text\"\n        name=\"task\"\n        ref={ref}\n        autoComplete=\"off\"\n        onKeyPress={handleEnterPress}\n      />\n      <Button onClick={handleAdd} ref={addButtonRef}>\n        <AddTitle size={1}>Add Task</AddTitle>\n      </Button>\n    </div>\n  );\n});\n\nexport default AddTask;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./Checkbox.scss\";\n\nconst Checkbox = props => {\n  const [check, setCheck] = useState(false);\n  const handleCheck = e => {\n    setCheck(e.target.checked);\n    props.handleCheck(e.target.checked, props.index);\n  };\n\n  useEffect(() => {\n    setCheck(props.done);\n  }, [props.done]);\n\n  return (\n    <li className=\"checkbox-item\">\n      <input\n        type=\"checkbox\"\n        id={`checkbox-${props.index}`}\n        checked={check}\n        onChange={handleCheck}\n      />\n      <label htmlFor={`checkbox-${props.index}`}>\n        <span className=\"checkbox-label\">{props.task}</span>\n        <span className=\"styled-checkbox\" />\n      </label>\n    </li>\n  );\n};\n\nexport default Checkbox;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Link = styled.a`\n  color: inherit;\n  text-decoration: none;#61dafb\n`;\n\nconst StyledCredit = styled.h3`\n  /* position: absolute; */\n  position: relative;\n  /* bottom: -50px; */\n  left: 0;\n  color: rgba(255, 255, 255, 0.5);\n  font-family: \"Helvetica Now Text Regular\", sans-serif;\n  font-weight: 500;\n  /* text-transform: uppercase; */\n  /* letter-spacing: 0.08rem; */\n  font-size: 0.8rem;\n  width: 100%;\n  @media screen and (max-width: 500px) {\n    font-size: 0.7rem;\n  }\n  & > *:not(:last-child) {\n    float: left;\n    vertical-align: middle;\n  }\n`;\n\nclass Credit extends Component {\n  render() {\n    return (\n      <StyledCredit>\n        <span>\n          Made with{\" \"}\n          <FontAwesomeIcon\n            icon={faHeart}\n            pulse\n            style={{ color: \"#f44336\", opacity: \"1\", margin: \"0 2px\" }}\n          />{\" \"}\n          by{\" \"}\n          <Link\n            href=\"http://imsolitude.github.io\"\n            style={{ color: \"rgba(255, 255, 255, 1)\" }}\n            target=\"_blank\"\n          >\n            MuhammadJ\n          </Link>\n          <Link\n            href={this.props.href}\n            target=\"_blank\"\n            style={{ opacity: \"1\", float: \"right\" }}\n          >\n            <FontAwesomeIcon\n              icon={faGithub}\n              size=\"2x\"\n              style={{ color: \"white\" }}\n            />\n          </Link>\n        </span>\n      </StyledCredit>\n    );\n  }\n}\n\nexport default Credit;\n","import React, { useState, useEffect } from \"react\";\nimport AddTask from \"./AddTask\";\nimport { Title } from \"./Styled/Styled\";\nimport Checkbox from \"./Checkbox/Checkbox\";\nimport Credit from \"./Credit\";\nimport { isEmpty } from \"../utils\";\nimport \"./App.scss\";\n\nconst App = props => {\n  const [tasks, setTasks] = useState([\n    { task: \"NodeJS Homework\", done: false },\n    { task: \"Practicing React\", done: false },\n    { task: \"Pay Taxes Today\", done: false }\n  ]);\n  const [tasksNumber, setTasksNumber] = useState(0);\n\n  // LocalStorage\n  useEffect(() => {\n    if (localStorage.getItem(\"tasks\")) {\n      setTasks(JSON.parse(localStorage.getItem(\"tasks\")));\n    }\n    return () => {\n      localStorage.clear();\n    };\n  }, []);\n\n  const handleCheck = (checkValue, taskIndex) => {\n    let cloneTasks = tasks.map((task, i) =>\n      i === taskIndex\n        ? Object.assign({}, { task: tasks[taskIndex].task, done: checkValue })\n        : task\n    );\n    setTasks(cloneTasks);\n    localStorage.setItem(\"tasks\", JSON.stringify(cloneTasks));\n  };\n\n  useEffect(() => {\n    setTasksNumber(tasks.filter(task => !task.done).length);\n  }, [tasks]);\n\n  const myInput = React.createRef();\n  useEffect(() => {\n    myInput.current.focus();\n  });\n\n  const handleAdd = () => {\n    if (!isEmpty(myInput.current.value.trim())) {\n      setTasks([...tasks, { task: myInput.current.value.trim(), done: false }]);\n    } else {\n      return;\n    }\n    localStorage.setItem(\n      \"tasks\",\n      JSON.stringify([\n        ...tasks,\n        { task: myInput.current.value.trim(), done: false }\n      ])\n    );\n    myInput.current.value = \"\";\n  };\n\n  return (\n    <>\n      <div className=\"overlay\">\n        <div className=\"container\">\n          <Title>\n            ToDone\n            <span className=\"tasks-number\">{tasksNumber}</span>\n            <span>📌</span>\n            <span />\n          </Title>\n          <ul className=\"checkbox\">\n            {tasks.map((task, i) => (\n              <Checkbox\n                key={i}\n                index={i}\n                task={task.task}\n                done={task.done}\n                handleCheck={handleCheck}\n              />\n            ))}\n          </ul>\n\n          <AddTask handleAdd={handleAdd} ref={myInput} />\n        </div>\n      </div>\n      <Credit href=\"http://github.com/ImSolitude/ToDone\" />\n    </>\n  );\n};\n\nexport default App;\n","export function randomArrayValue(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function isEmpty(value) {\n  return value === \"\" ? true : false;\n}\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faCircleNotch } from \"@fortawesome/free-solid-svg-icons\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import AppRouter from './components/Router';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n<App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}